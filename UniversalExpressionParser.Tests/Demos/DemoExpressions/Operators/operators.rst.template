=========
Operators
=========

.. contents::
   :local:
   :depth: 2

- Operators that the valid expressions can use are defined in property **System.Collections.Generic.IReadOnlyList&lt;UniversalExpressionParser.IOperatorInfo&gt; Operators { get; }** in interface **UniversalExpressionParser.IExpressionLanguageProvider** (an instance of this interface is passed to the parser).
- The interface **UniversalExpressionParser.IOperatorInfo** has properties for operator name (i.e., a collection of texts that operator consists of, such as ["IS", "NOT", "NUL"] or ["+="]), priority, unique Id, operator type (i.e., binary, unary prefix or unary postfix).
- Two different operators can have similar names, as long as they have different operator. For example "++" can be used both as unary prefix as well as unary postfix operator.

Example of defining operators in an implementation of **UniversalExpressionParser.IExpressionLanguageProvider**
===============================================================================================================

.. sourcecode:: csharp
     :linenos:     

     public class TestExpressionLanguageProviderBase : ExpressionLanguageProviderBase
     {
         //...
         // Some other method and property implementations here
         // ...
         public override IReadOnlyList<IOperatorInfo> Operators { get; } = new IOperatorInfo[] 
         {
         	// The third parameter (e.g., 0) is the priority.
         	new OperatorInfo(1, new [] {"!"}, OperatorType.PrefixUnaryOperator, 0),
         	new OperatorInfo(2, new [] {"IS", "NOT", "NULL"}, OperatorType.PostfixUnaryOperator, 0),
         
         	new OperatorInfo(3, new [] {"*"}, OperatorType.BinaryOperator, 10),
         	new OperatorInfo(4, new [] {"/"}, OperatorType.BinaryOperator, 10),
         
         	new OperatorInfo(5, new [] {"+"}, OperatorType.BinaryOperator, 30),
     	    new OperatorInfo(6, new [] {"-"}, OperatorType.BinaryOperator, 30),
         }
     }

- Operator expression (e.g., "a * b + c * d") is parsed to an expression item of type **UniversalExpressionParser.ExpressionItems.IOperatorExpressionItem** (a subclass of **UniversalExpressionParser.ExpressionItems.IComplexExpressionItem**).
  
`Click here to see the definition of UniversalExpressionParser.ExpressionItems.IOperatorExpressionItem <https://github.com/artakhak/UniversalExpressionParser/blob/main/UniversalExpressionParser/ExpressionItems/IOperatorExpressionItem.cs/>`_

For example the expression "a * b + c * d", will be parsed to an expression logically similar to "*(+(a, b), +(x,d))". This is so since the binary operator "+" has lower priority (the value of **IOperatorInfo.Priority** is larger), than the binary operator "*". 

In other words this expression will be parsed to a binary operator expression item for "+" (i.e., an instance of **IOperatorExpressionItem**) with Operand1 and Operand2 also being binary operator expression items of type **UniversalExpressionParser.ExpressionItems.IOperatorExpressionItem** for expression items "a * b" and "c * d".

Example of considering priorities when parsing operators
========================================================

.. sourcecode::
     :linenos:
     
     <IncludedFilePlaceHolder>OperatorPriorities.expr</IncludedFilePlaceHolder>

`Click here to see the visualized instance of UniversalExpressionParser.IParseExpressionResult <https://github.com/artakhak/UniversalExpressionParser/blob/main/UniversalExpressionParser.Tests/Demos/DemoExpressions/Operators/OperatorPriorities.parsed/>`_

Example of using braces to change order of application of operators
===================================================================

.. sourcecode::
     :linenos:
     
     <IncludedFilePlaceHolder>BracesToChangeOperatorEvaluationOrder.expr</IncludedFilePlaceHolder>

`Click here to see the visualized instance of UniversalExpressionParser.IParseExpressionResult <https://github.com/artakhak/UniversalExpressionParser/blob/main/UniversalExpressionParser.Tests/Demos/DemoExpressions/Operators/BracesToChangeOperatorEvaluationOrder.parsed/>`_

Example of operators with multiple parts in operator names
==========================================================

.. sourcecode::
     :linenos:
     
     <IncludedFilePlaceHolder>MultipartOperators.expr</IncludedFilePlaceHolder>

`Click here to see the visualized instance of UniversalExpressionParser.IParseExpressionResult <https://github.com/artakhak/UniversalExpressionParser/blob/main/UniversalExpressionParser.Tests/Demos/DemoExpressions/Operators/MultipartOperators.parsed/>`_

Example of two operators (e.g., postfix operators, then a binary operator) used next to each other without spaces in between
============================================================================================================================

.. sourcecode::
     :linenos:
     
     <IncludedFilePlaceHolder>NoSpacesBetweenOperators.expr</IncludedFilePlaceHolder>

`Click here to see the visualized instance of UniversalExpressionParser.IParseExpressionResult <https://github.com/artakhak/UniversalExpressionParser/blob/main/UniversalExpressionParser.Tests/Demos/DemoExpressions/Operators/NoSpacesBetweenOperators.parsed/>`_

Example of unary prefix operator used to implement "return" statement
=====================================================================

.. sourcecode::
     :linenos:
     
     <IncludedFilePlaceHolder>UnaryPrefixOperatorUsedForReturnStatement.expr</IncludedFilePlaceHolder>

`Click here to see the visualized instance of UniversalExpressionParser.IParseExpressionResult <https://github.com/artakhak/UniversalExpressionParser/blob/main/UniversalExpressionParser.Tests/Demos/DemoExpressions/Operators/UnaryPrefixOperatorUsedForReturnStatement.parsed/>`_